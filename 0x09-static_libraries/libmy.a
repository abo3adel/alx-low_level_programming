#include "main.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
 * _islower - checks for lowercase character
 * @c: character to be checked
 *
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

/**
 * _isalpha - checks for alphabetic character
 * @c: character to be checked
 *
 * Return: 1 if c is a letter, lowercase or uppercase, 0 otherwise
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

/**
 * _abs - computes the absolute value of an integer
 * @n: integer value to process
 *
 * Return: absolute value of n
 */
int _abs(int n)
{
	return (n < 0 ? -n : n);
}

/**
 * _isupper - checks for uppercase character
 * @c: character to be checked
 *
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}

/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: character to be checked
 *
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

/**
 * _strlen - returns the length of a string
 * @s: string to process
 *
 * Return: length of the string s
 */
int _strlen(char *s)
{
	int len = 0;

	while (*s++)
		len++;

	return (len);
}

/**
 * _puts - prints a string, followed by a new line, to stdout
 * @s: string to be printed
 *
 * Return: void
 */
void _puts(char *s)
{
	while (*s)
	{
		_putchar(*s++);
	}

	_putchar('\n');
}

/**
 * _strcpy - copies the string pointed to by src, including the
 *           terminating null byte, to the buffer pointed to by dest
 * @dest: buffer to copy string to
 * @src: string to be copied
 *
 * Return: pointer to the destination buffer dest
 */
char *_strcpy(char *dest, char *src)
{
	char *p = dest;

	while ((*p++ = *src++))
		;

	return (dest);
}

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: integer value of converted string
 */
int _atoi(char *s)
{
	int n = 0;

	while (*s)
	{
		n = n * 10 + (*s - '0');
		s++;
	}

	return (n);
}

/**
 * _strcat - concatenates two strings
 * @dest: string to which src will be appended
 * @src: string to be appended to dest
 *
 * Return: pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	char *p = dest;

	while (*p)
		p++;

	while ((*p++ = *src++))
		;

	return (dest);
}

/**
 * _strncat - concatenates two strings
 * @dest: string to which src will be appended
 * @src: string to be appended to dest
 * @n: maximum number of characters to be appended
 *
 * Return: pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	char *p = dest;

	while (*p)
		p++;

	while (n-- && (*p++ = *src++))
		;

	if (*(p - 1) != '\0')
		*p = '\0';

	return (dest);
}

/**
 * _strncpy - copies a string
 * @dest: buffer to copy string to
 * @src: string to be copied
 * @n: maximum number of characters to be copied
 *
 * Return: pointer to the destination buffer dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	char *p = dest;

	while (n-- && *src)
		*p++ = *src++;

	if (*(p - 1) != '\0')
		*p = '\0';

	return (dest);
}

/**
 * _strcmp - compares two strings
 * @s1: first string to be compared
 * @s2: second string to be compared
 *
 * Return: 0 if s1 and s2 are equal,
 *         <0 if s1 is less than s2,
 *         >0 if s1 is greater than s2
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s1 == *s2)
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}

/**
 * _memset - fills memory with a constant byte
 * @s: memory area to be filled
 * @b: value to be set
 * @n: number of bytes to be set to the value
 *
 * Return: pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;

	while (n--)
		*p++ = b;

	return (s);
}

/**
 * _memcpy - copies memory area
 * @dest: memory area to copy to
 * @src: memory area to copy from
 * @n: number of bytes to copy
 *
 * Return: pointer to the destination memory area dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *p = dest;

	while (n--)
		*p++ = *src++;

	return (dest);
}

/**
 * _strchr - locates a character in a string
 * @s: string to be searched
 * @c: character to be located
 *
 * Return: pointer to the first occurrence of the character c in the string s,
 *         or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	while (*s && *s != c)
	{
		s++;
	}

	return (*s == c ? s : NULL);
}

/**
 * _strspn - gets the length of a prefix substring
 * @s: string to be searched
 * @accept: string containing the characters to match
 *
 * Return: number of characters in the initial segment of s that match accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	char *p = accept;

	while (*s)
	{
		while (*p && *p != *s)
			p++;

		if (*p)
		{
			n++;
			p = accept;
		}
		else
		{
			break;
		}

		s++;
	}

	return (n);
}

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string to be searched
 * @accept: string containing the characters to match
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept,
 *         or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	while (*s)
	{
		char *p = accept;

		while (*p)
		{
			if (*p == *s)
			{
				return (s);
			}

			p++;
		}

		s++;
	}

	return (NULL);
}

/**
 * _strstr - locates a substring
 * @haystack: string to be searched
 * @needle: string to be located
 *
 * Return: pointer to the beginning of the located substring in haystack,
 *         or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	if (!*needle)
	{
		return (haystack);
	}

	while (*haystack)
	{
		char *p = haystack;
		char *q = needle;

		while (*q && *p == *q)
		{
			p++;
			q++;
		}

		if (!*q)
		{
			return (haystack);
		}

		haystack++;
	}

	return (NULL);
}
